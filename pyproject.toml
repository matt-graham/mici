[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools",
    "setuptools-scm",
]

[project]
authors = [
    {email = "m.graham@ucl.ac.uk", name = "Matt Graham"},
]
classifiers = [
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Typing :: Typed",
]
dependencies = [
    "numpy>=1.22",
    "scipy>=1.1",
]
description = "MCMC samplers based on simulating Hamiltonian dynamics on a manifold."
dynamic = [
    "version",
]
keywords = [
    "inference",
    "sampling",
    "MCMC",
    "HMC",
]
name = "mici"
readme = "README.md"
requires-python = ">=3.9"
license.file = "LICENCE"
urls.homepage = "https://github.com/matt-graham/mici"
urls.documentation = "https://matt-graham.github.io/mici"

[project.optional-dependencies]
dev = [
    "black",
    "build",
    "mypy",
    "pre-commit",
    "pytest",
    "ruff",
    "tox>=4",
    "twine",
]
autodiff = [
    "autograd>=1.3",
    "multiprocess>=0.7.0"
]

[tool.coverage]
report = {skip_covered = true, sort = "cover"}
run = {branch = true, parallel = true, relative_files = true, source = [
    "mici",
]}
paths.source = [
    "src",
    ".tox*/*/lib/python*/site-packages",
]

[tool.pytest.ini_options]
addopts = "--color=yes -v"
testpaths = [
    "tests",
]

[tool.ruff]
force-exclude = true
ignore = [
    "D203", # no-blank-line-before-class
    "D212", # multi-line-summary-first-line
    "D417", # argument description in docstring (unreliable)
    "PLR2004", # magic values in comparisons
    "RET505", # superfluous else return,
    "UP007", # X | Y for type annotations (Python 3.10+ only),
    "D205",  # blank line between summary and description in docstrings
    "D102",  # missing docstrings on public methods
    "D105",  # missing docstrings on magic methods
    "D107",  # missing docstring on __init__ method
    "ARG002",  # unused method arguments
]
per-file-ignores = { "test_*" = ["D100", "D101", "D103", "S101"], "__init__.py" = ["F401"] }
select = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C",
    "COM",
    "D",
    "DJ",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "EXE",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "T",
    "TCH",
    "TID",
    "UP",
    "W",
    "YTT",
]
target-version = "py39"
isort.known-first-party = [
    "mici",
]
mccabe.max-complexity = 18
pep8-naming.classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
]
pydocstyle.convention = "google"
pylint.max-args = 20

[tool.setuptools_scm]
local_scheme = "no-local-version"
write_to = "src/mici/_version.py"

[tool.tox]
legacy_tox_ini = """
    [gh-actions]
    python =
        3.9: py39
        3.10: py310
        3.11: py311

    [testenv]
    commands =
        pytest --cov {posargs}
    deps =
        pytest
        pytest-cov
        autograd>=1.3
        multiprocess>=0.7.0
        pystan
        pymc>=5
        arviz

    [testenv:docs]
    commands =
        sphinx-apidoc -o docs src/ -T -e -d 2 -M
        sphinx-build -W -b html docs docs/_build/html
    deps =
        sphinx
        sphinx_rtd_theme

    [tox]
    env_list =
        py39
        py310
        py311
"""
